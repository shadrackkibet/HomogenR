france_map <- map_data("france")
P_fr <- ggplot() + geom_polygon(data = france_map, aes(x = long, y = lat, group = group)) + coord_map()
# Let us add the scale bar
P_fr <- P_fr + scale_bar(lon = -5, lat = 42.5,
distance_lon = 100, distance_lat = 20,
distance_legend = 40, dist_unit = "km",
arrow_length = 100, arrow_distance = 60, arrow_north_size = 6)
# Modifying the theme a bit
P_fr + theme(panel.grid.minor = element_line(colour = NA), panel.grid.minor = element_line(colour = NA),
panel.background = element_rect(fill = NA, colour = NA), axis.text.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(), axis.title = element_blank(),
rect = element_blank(),
plot.margin = unit(0 * c(-1.5, -1.5, -1.5, -1.5), "lines"))
?scalebar()
# Not run:
library(sf)
data(domestic_violence)
# Map in geographic coordinates
ggplot(domestic_violence, aes(fill = Scaled)) +
geom_sf() +
scalebar(domestic_violence, dist = 4, dist_unit = "km",
transform = TRUE, model = "WGS84") +
blank() +
scale_fill_continuous(low = "#fff7ec", high = "#7F0000")
# Map in projected coordinates
domestic_violence2 <- st_transform(domestic_violence, 31983)
ggplot(domestic_violence2, aes(fill = Scaled)) +
geom_sf() +
scalebar(domestic_violence2, dist = 4, dist_unit = "km",
transform = FALSE, model = "WGS84") +
blank() +
scale_fill_continuous(low = "#fff7ec", high = "#7F0000")
## End(Not run)
raindata <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\prc_station_synoptic_1981_2010.csv", na = "-99")
raindata <- raindata[3:10959,]
raindata_lon <- pivot_longer(data = raindata, cols = "8937065":"9439021", names_to = "ID", values_to = "Rain")
raindata_lon %<>%
arrange(ID)
raindata_lon$Stations <- as.Date(raindata_lon$Stations,format = "%Y%m%d")
raindata_lon$year <- year(raindata_lon$Stations)
raindata_lon$month <- month(raindata_lon$Stations)
raindata_lon$month <- month(raindata_lon$Stations,abbr = TRUE)
raindata_lon$month <- month(raindata_lon$Stations,abbr = TRUE, label = TRUE)
library(summaryR)
raindata_lon %>%
group_by(year, month) %>%
summarise(Rain = summary_sum(Rain))
na_check
raindata_lon %>%
group_by(year, month) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 27))
raindata_mon <- raindata_lon %>%
group_by(year, month) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 27))
View(raindata_mon)
raindata_mon <- raindata_lon %>%
group_by(ID,year, month) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 27))
library(HomogenR)
HomogenR::bayesian_test(data = raindata_mon, series = "Rain")
bayesian_test(data = mtcars,series = "cyl")
bayesian_test(data = mtcars,series = "mpg")
view(iris)
iris %>% group_by(Species)
iris %>% group_by(Species) %>%
summarise(d=mean(Sepal.Length))
library(homg)
library(HomogenR)
bayesian_test(mtcars$mpg)
bayesian_test(?)
library(HomogenR)
bayesian_test(mtcars$mpg)
Buishand_range_test(mtcars$mpg)
Buishand_range_test(raindata_mon$Rain)
climtrends::BuishandRangeTest(mtcars$mpg)
Buishand_range_test(mtcars$mpg)
Buishand_range_test(raindata_mon$Rain, na.rm = T)
iris %>% group_by(Species) %>%
summarise(b=Buishand_range_test(Sepal.Length))
summarise(b=Buishand_range_test(iris$Sepal.Length))
iris %>% group_by(Species) %>%
summarise(b=Buishand_range_test(iris$Sepal.Length))
mean()
library(HomogenR)
library(HomogenR)
library(HomogenR)
?climtrends::BuishandRangeTest()
# Buishand range test for Turin 1961-2003
BuishandTurin<- BuishandRangeTest(yearly.average.temperature.Turin.Milan[,2])
# Buishand range test for Milan 1961-2003
BuishandMilan<- BuishandRangeTest(yearly.average.temperature.Turin.Milan[,3])
plot(1961:2003,BuishandTurin,type='l',col='cyan',ylim=c(-2.5,0.5),
main='Buishand range test 1961-2003',xlab='Years',ylab='Buishand value')
par(new=TRUE)
plot(1961:2003,BuishandMilan,type='l',col='magenta',ylim=c(-2.5,0.5),xlab='',ylab='')
legend("top",c('Turin','Milan'),text.col=c('cyan','magenta'))
library(climtrends)
# Buishand range test for Turin 1961-2003
BuishandTurin<- BuishandRangeTest(yearly.average.temperature.Turin.Milan[,2])
# Buishand range test for Milan 1961-2003
BuishandMilan<- BuishandRangeTest(yearly.average.temperature.Turin.Milan[,3])
plot(1961:2003,BuishandTurin,type='l',col='cyan',ylim=c(-2.5,0.5),
main='Buishand range test 1961-2003',xlab='Years',ylab='Buishand value')
par(new=TRUE)
plot(1961:2003,BuishandMilan,type='l',col='magenta',ylim=c(-2.5,0.5),xlab='',ylab='')
legend("top",c('Turin','Milan'),text.col=c('cyan','magenta'))
plot(mtcars$mpg)
par(new = T)
plot(mtcars$cyl,col = 'red')
plot(mtcars$cyl,col = 'red')
par(new = T)
plot(mtcars$mpg, col = "green", ylab = "")
par(new = T)
plot(mtcars$disp, col = "blue", ylab = "")
library(HomogenR)
library(HomogenR)
buishand_range_test(mtcars$mpg)
plot(buishand_range_test(mtcars$mpg))
plot(buishand_range_test(raindata_mon$Rain))
summary_sd(c(NA))
summary_sd(c(NA),na.rm = T)
buishand_range_test(raindata_mon$Rain)
buishand_range_test(raindata_mon$Rain,na.rm = T)
2/-4
2/0
f <- buishand_range_test(raindata_mon$Rain,na.rm = T)
is.infinite(f)
any(is.infinite(f))
plot(f)
plot(f,'l')
plot(f,type='l')
bayesian_test()
?CraddockTest()
?round()
?SNHTabsoluteTrend()
SNHTabsolute
SNHTabsoluteTrend
SNHTrelative
snht
?snht()
SNHTabsoluteDoubleShift
?snht::snht()
?PettittTest()
?von_neumann_ratio_test()
?VonNeumannRatio()
?VonNeumannRatio()
library(HomogenR)
?bayesian_test()
library(HomogenR)
library(HomogenR)
?bayesian_test()
library(HomogenR)
library(HomogenR)
devtools::github_release()
devtools::use_package()
library(HomogenR)
library(HomogenR)
library(HomogenR)
usethis::use_citation()
usethis::use_citation()
usethis::use_citation()
sqrt
sqrt
library(HomogenR)
library(HomogenR)
warnings()
usethis::use_namespace()
library(HomogenR)
library(HomogenR)
ls()
sessionInfo()
.rs.restartR()
sessionInfo()
unloadNamespace()
.rs.restoreGraphics()
.rs.restartR()
sessionInfo()
sessionInfo()
.libPaths()
search()
requireNamespace("dplyr")
search()
loadNamespace("dplyr")
search()
search()
?loadedNamespaces()
library(dplyr)
search()
select()
unloadNamespace(dplyr)
unloadNamespace("dplyr")
search()
loadNamespace(dplyr)
loadNamespace("dplyr")
search()
loadNamespace("dplyr")
loadNamespace(package = "dplyr")
search()
?select()
.rs.restartR()
?select()
loadedNamespaces("dplyr")
loadedNamespaces(package= "dplyr")
loadNamespace("dplyr")
?select()
sessionInfo()
unloadNamespace("dplyr")
?select()
unloadNamespace("summaryR")
unloadNamespace("HomogenR")
unloadNamespace("summaryR")
loadNamespace("HomogenR")
buishand_range_test
?buishand_range_test()
buishand_range_test(mtcars$mpg)
?snht()
?select()
library(HomogenR)
serch()
search()
buishand_range_test(mtcars$mpg)
.libPaths()
?summaryR::na_check()
library(summaryR)
na_check()
?na_check()
na_check(1:2)
@import
?@import
#'?@import
#'?@import
usethis::browse_github()
10+20+350+340
(10+20+350+340)/4
library(circular)
x <- 10+20+350+340
mean(x)
x
x <-c(10,20,350,340)
mean(x)
circular(x)
x <- circular(x)
mean(x)
x <- circular(x,units = "degrees")
mean(x)
x <-c(10,20,350,340)
x <- circular(x,units = "degrees")
mean(x)
mean.circular(x)
mean.circular(x)
?circular()
circular(modulo = 'pi')
circular(x,modulo = 'pi')
circular(x,modulo = '2pi')
circular(x,units = 'degrees', modulo = '2pi')
circular(x,units = 'degrees', modulo = 'pi')
circular(x,units = 'degrees', modulo = 'pi')
circular(x,units = 'degrees', modulo = '2pi')
circular(x,units = 'degrees', modulo = '2pi')
circular(x,units = 'degrees', modulo = 'asis')
circular(x,units = 'degrees', modulo = 'asis')
circular(x,units = 'radians', modulo = 'asis')
circular(x,units = 'radians', modulo = 'asis')
circular(x,units = 'radians', modulo = '2pi')
circular(x,units = 'radians', modulo = 'asis')
circular(x,units = 'radians', modulo = 'asis')
circular(x,units = 'radians', modulo = 'pi')
circular(x,units = 'radians', modulo = '2pi')
circular(x,units = 'degrees', modulo = '2pi')
x <- circular(x,units = 'degrees', modulo = '2pi')
mean(x)
mean.circular(x)
circular
x <- circular(x,units = 'degrees', modulo = '2pi')
mean(x)
x <-c(10,20,350,340)
y <- circular(x,units = 'degrees', modulo = '2pi')
mean(x)
mean(y)
median(x)
median(y)
devtodevtools::
library(devtools)
use_github("Hadley/devtools")
instll_github("Hadley/devtools")
install_github("Hadley/devtools")
devtools::install_github("r-lib/devtools")
devtools::use
summaryR::na_check()
devtools::install_github("r-lib/devtools")
devtools::install_github("r-lib/devtools", force = T)
devtools::as.package()
devtools::install_github("r-lib/devtools")
(1/2*1/5)*(1/2*3/20)
3/400
(1/2*1/5)+(1/2*3/20)
7/40
(1/2*3/20)+(1/2*17/20)
devtools::install_github("r-lib/devtools")
remotes::install_github("r-lib/devtools")
remotes::install_github("r-lib/devtools")
remotes::install_github("r-lib/devtools")
remotes::install_github("r-lib/devtools")
library(HomogenR)
pettit_test(raindata_ann$Rain[31:60], na.rm = T)
knitr::opts_chunk$set(fig.pos = 'H')
setwd("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data")
library(ggrepel)
library(tidyverse)
library(readxl)
library(magrittr)
library(stringr)
library(legendMap)
library(sf)
library(ggsn)
library(lubridate)
library(summaryR)
library(HomogenR)
shape_file <- read_sf("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\Shape files\\gadm36_KEN_1.shp") %>%
mutate(lon = map_dbl(geometry, ~ st_centroid(.x)[[1]]), lat = map_dbl(geometry, ~ st_centroid(.x)[[2]]))
catalogue <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\synoptic_stations.csv")
catalogue$lab <- str_split_fixed(catalogue$Name, pattern = fixed(" "), n=2)[,1]
ggplot() +
geom_sf(data = shape_file) +
geom_point(data = catalogue, mapping = aes(x = X , y =  Y, colour = lab)) +
#geom_label_repel(data = catalogue, mapping = aes(x = X, y = Y, label = lab)) +
theme(plot.title = element_text(hjust = 0.5)) +
#labs(title = "SYNOPTIC STATIONS") +
# theme_minimal() +
theme(panel.background = element_rect(colour='black',fill='white'),legend.position =  "none") +
xlab("Lon") +
ylab("Lat") +
scale_bar(lon = 42, lat = -4,
distance_lon = 150, distance_lat = 25, distance_legend = 50,
dist_unit = "km", arrow_length = 150, arrow_distance = 800)
raindata <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\prc_station_synoptic_1981_2010.csv", na = "-99")
raindata %<>% rename(date =  Stations)
station_meta <- read_csv("F:\\AIMS Cameroon\\AIMS Essay\\data\\synoptic_stations.csv")
station_meta <- station_meta[1:37,]
raindata <- raindata[3:10959,]
station_meta$Name <-  word(string = station_meta$Name, start = 1, end = 1)
raindata_lon <- pivot_longer(data = raindata, cols = "8937065":"9439021", names_to = "ID", values_to = "Rain")
raindata_lon %<>%
arrange(ID)
raindata_lon$date <- as.Date(raindata_lon$date, format = "%Y%m%d")
raindata_lon$year <- year(raindata_lon$date)
raindata_lon$month <- month(raindata_lon$date, abbr = TRUE, label = TRUE)
raindata_lon$ID <- as.numeric(raindata_lon$ID)
raindata_lon <- left_join(x =  station_meta, y =  raindata_lon, by = c("Code" = "ID"))
raindata_mon <- raindata_lon %>%
group_by(Name, Code, year, month) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 27))
raindata_ann <- raindata_lon %>%
group_by(Name, Code, year) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 340))
ggplot(data = raindata_ann %>% filter(Name == "DAGORETTI"), mapping = aes(x = year, y = Rain), ) +
geom_point(size = 2) +
geom_line(size = 1) +
theme_bw()
pettit_test(raindata_ann$Rain[31:60], na.rm = T)
trend::pettitt.test(raindata_ann$Rain)
trend::pettitt.test(raindata_ann$Rain[31:60])
trend::pettitt.test(raindata_ann$Rain[1:30])
library(HomogenR)
trend::pettitt.test(raindata_ann$Rain[1:30])
pettit_test(raindata_ann$Rain[31:60], na.rm = T)
raindata <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\prc_enacts_synoptic_1981_2010.csv", na = "-99")
raindata %<>% rename(date =  Stations)
raindata <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\prc_enacts_synoptic_1981_2010.csv", na = "-99")
View(catalogue)
View(raindata)
raindata %<>% rename(date =  ID)
station_meta <- read_csv("F:\\AIMS Cameroon\\AIMS Essay\\data\\synoptic_stations.csv")
station_meta <- station_meta[1:37,]
raindata <- raindata[3:10959,]
station_meta$Name <-  word(string = station_meta$Name, start = 1, end = 1)
raindata_lon <- pivot_longer(data = raindata, cols = "8937065":"9439021", names_to = "ID", values_to = "Rain")
raindata_lon %<>%
arrange(ID)
raindata <- read_csv("F:\\Projects\\Homogeneity Analysis of In Situ Meteorological Data in Kenya\\data\\prc_enacts_synoptic_1981_2010.csv", na = "-99")
raindata %<>% rename(date =  ID)
station_meta <- read_csv("F:\\AIMS Cameroon\\AIMS Essay\\data\\synoptic_stations.csv")
station_meta <- station_meta[1:37,]
raindata <- raindata[3:10959,]
station_meta$Name <-  word(string = station_meta$Name, start = 1, end = 1)
raindata_lon <- pivot_longer(data = raindata, cols = "8937065":"9439021", names_to = "ID", values_to = "Rain")
#raindata_lon %<>%
#  arrange(ID)
raindata_lon$date <- as.Date(raindata_lon$date, format = "%Y%m%d")
raindata_lon$year <- year(raindata_lon$date)
raindata_lon$month <- month(raindata_lon$date, abbr = TRUE, label = TRUE)
raindata_lon$ID <- as.numeric(raindata_lon$ID)
raindata_lon <- left_join(x =  station_meta, y =  raindata_lon, by = c("Code" = "ID"))
raindata_mon <- raindata_lon %>%
group_by(Name, Code, year, month) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 27))
raindata_ann <- raindata_lon %>%
group_by(Name, Code, year) %>%
summarise(Rain = summary_sum(Rain, na.rm = TRUE, na_type = "n_non_miss", na_min_n = 340))
View(raindata_ann)
anyNA(raindata_ann)
anyNA(raindata_ann$Name)
anyNA(raindata_ann$Code)
anyNA(raindata_ann$year)
View(raindata)
n_distinct(raindata_ann$Name)
n_distinct(raindata_ann$Code)
homogenR::bayesian_test(data_series = mtcars$mpg)
package.skeleton()
package.skeleton("homogenR")
package.skeleton("dplyr")
?package.skeleton("dplyr")
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
require(stats)
## two functions and two "data sets" :
f <- function(x, y) x+y
g <- function(x, y) x-y
d <- data.frame(a = 1, b = 2)
e <- rnorm(1000)
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
list.files()
list.files(pattern = "Rmd")
list.files(pattern = "R")
list.files(pattern = ".R")
dir.create()
dir.create("d")
#' @param data_series A climatological time series.
#' @param ... Additional arguments to be passed into methods.
#' @param all A logical value indicating whether to return all Pettit test values otherwise the absolute maximum is returned.
#' @param plot  A logical value to return plot of Pettit test values.
#'
#' @return Pettit test results.
#' @author Shadrack Kibet
#' @export
#'
#' @examples
pettit_test <- function(data_series, all = FALSE, plot = FALSE, ...) {
if(missing(data_series)) stop("argument 'data series' is missing with no default")
n <- length(data_series)
s2 <- 1:n
s <- sapply(s2, function(k) {
n <- length(data_series)
r <- rank(data_series)
b <- 0
for (kk in 1:k) b <- b + r[kk]
return(2 * b - kk * (n + 1))
})
if (plot) plot(s, type = 'b')
if (all) s else max(abs(s))
}
#' @param na.rm A logical value indicating whether missing values should be stripped before the computation proceeds.
#' @param data_series A climatological time series.
#' @param ... Additional arguments to be passed into methods.
#' @param dp Integer indicating the number of decimal places (round) to be used. By default "dp=2".
#'
#' @return Von Neumann's ratio test results.
#' @author Shadrack Kibet
#' @export
#'
#' @examples
von_neumann_ratio_test <- function(data_series, dp = 2, na.rm = FALSE, ...) {
if(missing(data_series)) stop("argument 'data series' is missing with no default")
n <- length(data_series)
m <- summaryR::summary_mean(data_series, na.rm = na.rm)
t1 <- data_series[1:(n - 1)]
t2 <- data_series[2:n]
if (summaryR::summary_sum((data_series - m)^2, na.rm = na.rm) == 0) return(9999)
N <- (summaryR::summary_sum((t1 - t2)^2, na.rm = na.rm)) /summaryR::summary_sum((data_series - m)^2, na.rm = na.rm)
if (is.na(N)) return(9999)
round(N, digits = dp)
}
#' @param na.rm A logical value indicating whether missing values should be stripped before the computation proceeds.
#' @param data_series A climatological time series.
#' @param ... Additional arguments to be passed into methods.
#' @param dp Integer indicating the number of decimal places (round) to be used. By default "dp=2".
#'
#' @return The Bayesian test results.
#' @author Shadrack Kibet
#' @export
#'
#' @examples
bayesian_test <- function(data_series, dp = 2, na.rm = FALSE, ...) {
if(missing(data_series)) stop("argument 'data series' is missing with no default")
dx <- summaryR::summary_sd(data_series, na.rm = na.rm)
n <- length(data_series)
k <- 1:n
sk <- sapply(k, function(kk) {
m <- summaryR::summary_mean(data_series, na.rm = na.rm)
b <- summaryR::summary_sum(data_series[1:kk] - m, na.rm = na.rm)
return(b)
})
zk <- ((k * (n - k)^-0.5) * sk) / dx
zk <- zk[!(is.nan(zk) | is.infinite(zk))]
A <- summaryR::summary_sum(zk**2)
round(A, digits = dp)
}
library(homogenR)
bayesian_test(mtcars$mpg)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
library(homogenR)
library(homogenR)
dir()
dat <- read.csv("F:\\online courses\\my sessions\\dplyr\\data\\guinea_two_stations.csv")
saveRDS(dat, file = "data\guinea.RDS")
saveRDS(dat, file = "data/guinea.RDS")
library(homogenR)
devtools::create()
devtools::create(getwd())
library(homogenR)
